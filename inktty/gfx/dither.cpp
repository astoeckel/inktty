/*
 *  inktty -- Terminal emulator optimized for epaper displays
 *  Copyright (C) 2018  Andreas St√∂ckel
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Affero General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Affero General Public License for more details.
 *
 *  You should have received a copy of the GNU Affero General Public License
 *  along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

#include <inktty/gfx/dither.hpp>

namespace inktty {
namespace dither {
static const uint8_t DITHER_PATTERNS_4BIT[16][4][4] = {
    // 0 white pixels, 16 black pixels
    {
        {0x00, 0x00, 0x00, 0x00},
        {0x00, 0x00, 0x00, 0x00},
        {0x00, 0x00, 0x00, 0x00},
        {0x00, 0x00, 0x00, 0x00},
    },
    // 1 white pixel, 15 black pixels
    {
        {0xFF, 0x00, 0x00, 0x00},
        {0x00, 0x00, 0x00, 0x00},
        {0x00, 0x00, 0x00, 0x00},
        {0x00, 0x00, 0x00, 0x00},
    },
    // 2 white pixels, 14 black pixels
    {
        {0xFF, 0x00, 0x00, 0x00},
        {0x00, 0x00, 0x00, 0x00},
        {0x00, 0x00, 0xFF, 0x00},
        {0x00, 0x00, 0x00, 0x00},
    },
    // 3 white pixels, 13 black pixels
    {
        {0xFF, 0x00, 0x00, 0x00},
        {0x00, 0x00, 0x00, 0x00},
        {0xFF, 0x00, 0xFF, 0x00},
        {0x00, 0x00, 0x00, 0x00},
    },
    // 4 white pixels, 12 black pixels
    {
        {0xFF, 0x00, 0xFF, 0x00},
        {0x00, 0x00, 0x00, 0x00},
        {0xFF, 0x00, 0xFF, 0x00},
        {0x00, 0x00, 0x00, 0x00},
    },
    // 5 white pixels, 11 black pixels
    {
        {0xFF, 0x00, 0xFF, 0x00},
        {0x00, 0xFF, 0x00, 0x00},
        {0xFF, 0x00, 0xFF, 0x00},
        {0x00, 0x00, 0x00, 0x00},
    },
    // 6 white pixels, 10 black pixels
    {
        {0xFF, 0x00, 0xFF, 0x00},
        {0x00, 0xFF, 0x00, 0x00},
        {0xFF, 0x00, 0xFF, 0x00},
        {0x00, 0x00, 0x00, 0xFF},
    },
    // 7 white pixels, 9 black pixels
    {
        {0xFF, 0x00, 0xFF, 0x00},
        {0x00, 0xFF, 0x00, 0x00},
        {0xFF, 0x00, 0xFF, 0x00},
        {0x00, 0xFF, 0x00, 0xFF},
    },
    // 8 white pixels, 8 black pixels
    {
        {0xFF, 0x00, 0xFF, 0x00},
        {0x00, 0xFF, 0x00, 0xFF},
        {0xFF, 0x00, 0xFF, 0x00},
        {0x00, 0xFF, 0x00, 0xFF},
    },
    // 9 white pixels, 7 black pixels
    {
        {0xFF, 0x00, 0xFF, 0x00},
        {0xFF, 0xFF, 0x00, 0xFF},
        {0xFF, 0x00, 0xFF, 0x00},
        {0x00, 0xFF, 0x00, 0xFF},
    },
    // 10 white pixels, 6 black pixels
    {
        {0xFF, 0x00, 0xFF, 0x00},
        {0xFF, 0xFF, 0x00, 0xFF},
        {0xFF, 0x00, 0xFF, 0x00},
        {0x00, 0xFF, 0xFF, 0xFF},
    },
    // 11 white pixels, 5 black pixels
    {
        {0xFF, 0x00, 0xFF, 0x00},
        {0xFF, 0xFF, 0x00, 0xFF},
        {0xFF, 0x00, 0xFF, 0x00},
        {0xFF, 0xFF, 0xFF, 0xFF},
    },
    // 12 white pixels, 4 black pixels
    {
        {0xFF, 0x00, 0xFF, 0x00},
        {0xFF, 0xFF, 0xFF, 0xFF},
        {0xFF, 0x00, 0xFF, 0x00},
        {0xFF, 0xFF, 0xFF, 0xFF},
    },
    // 13 white pixels, 3 black pixels
    {
        {0xFF, 0x00, 0xFF, 0x00},
        {0xFF, 0xFF, 0xFF, 0xFF},
        {0xFF, 0xFF, 0xFF, 0x00},
        {0xFF, 0xFF, 0xFF, 0xFF},
    },
    // 14 white pixels, 2 black pixels
    {
        {0xFF, 0x00, 0xFF, 0xFF},
        {0xFF, 0xFF, 0xFF, 0xFF},
        {0xFF, 0xFF, 0xFF, 0x00},
        {0xFF, 0xFF, 0xFF, 0xFF},
    },
    // 15 white pixels, 1 black pixel
    /*    {
            {0xFF, 0x00, 0xFF, 0xFF},
            {0xFF, 0xFF, 0xFF, 0xFF},
            {0xFF, 0xFF, 0xFF, 0xFF},
            {0xFF, 0xFF, 0xFF, 0xFF},
        },*/
    // 16 white pixels, 0 black pixels
    {
        {0xFF, 0xFF, 0xFF, 0xFF},
        {0xFF, 0xFF, 0xFF, 0xFF},
        {0xFF, 0xFF, 0xFF, 0xFF},
        {0xFF, 0xFF, 0xFF, 0xFF},
    }};

void ordered_binary_4bit_greyscale(uint8_t g, RGBA *tar, size_t tar_stride,
                                   int tar_x0, int tar_y0, int tar_x1,
                                   int tar_y1) {
	for (int y = tar_y0; y < tar_y1; y++) {
		RGBA *p_tar = tar + y * tar_stride / 4 + tar_x0;
		for (int x = tar_x0; x < tar_x1; x++) {
			const uint8_t v = DITHER_PATTERNS_4BIT[g & 0xF][y & 0x3][x & 0x3];
			*(p_tar++) = RGBA(v, v, v, 0xFF);
		}
	}
}
}  // namespace dither
}  // namespace inktty

